name: release

on:
  push:
    branches:
      - main
  pull_request:
    types: [synchronize, opened, reopened]

permissions:
  contents: write
  pull-requests: write
  packages: write

env:
  REGISTRY: ghcr.io
  REGISTRY_IMAGE: ghcr.io/${{ github.repository }}

jobs:
  # release-please:
  #   runs-on: ubuntu-latest
  #   outputs:
  #     release_created: ${{ steps.release.outputs.release_created }}
  #     tag_name: ${{ steps.release.outputs.tag_name }}
  #   steps:
  #     - uses: google-github-actions/release-please-action@v3
  #       id: release
  #       with:
  #         release-type: simple
  #         package-name: tgtg
  #         version-file: resources/version.txt
  package:
    # needs: [release-please]
    # if: ${{ needs.release-please.outputs.release_created }}
    runs-on: ${{ matrix.OS }}
    strategy:
      matrix:
        OS: ["ubuntu-latest", "windows-latest", "macos-latest"]
        include:
          - os: macOS-latest
            uploaded_filename: tgtg-x86_64-apple-darwin
            local_path: artifacts/tgtg-x86_64-apple-darwin
          - os: ubuntu-latest
            uploaded_filename: tgtg-x86_64-pc-linux
            local_path: artifacts/tgtg-x86_64-pc-linux
          - os: windows-latest
            uploaded_filename: tgtg-x86_64-pc-win32.exe
            local_path: artifacts/tgtg-x86_64-pc-win32.exe
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Log in to the Container registry
        if: matrix.OS == 'ubuntu-latest'
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Set up Docker Buildx
        if: matrix.OS == 'ubuntu-latest'
        uses: docker/setup-buildx-action@v2
      - name: Extract metadata (tags, labels) for Docker
        if: matrix.OS == 'ubuntu-latest'
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY_IMAGE }}
          # type=raw,value=${{ needs.release-please.outputs.tag_name }}
          tags: |
            type=schedule
            type=ref,event=branch
            type=ref,event=tag
            type=ref,event=pr
            type=raw,value=latest
      - uses: coursier/cache-action@v6
      - uses: VirtusLab/scala-cli-setup@v1
        with:
          power: true
          jvm: "temurin:17"
      - name: Package app
        if: matrix.OS != 'ubuntu-latest'
        run: scala-cli package . -o "${{ matrix.local_path }}" --native-image --graalvm-args -H:IncludeResources=version.txt
      - name: Package app
        if: matrix.OS == 'ubuntu-latest'
        run: scala-cli package . -o "${{ matrix.local_path }}" --native-image -- -H:IncludeResources=version.txt --static
      - name: Compress artifact
        if: ${{ matrix.OS == 'ubuntu-latest' }}
        uses: crazy-max/ghaction-upx@v2
        with:
          args: --best
          files: ${{ matrix.local_path }}
      - name: Build and push Docker image
        if: matrix.OS == 'ubuntu-latest'
        uses: docker/build-push-action@v4
        id: build
        with:
          build-args: "LOCAL_PATH=${{ matrix.local_path }}"
          context: .
          push: true
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64
          outputs: type=image,name=${{ env.REGISTRY_IMAGE }},push-by-digest=true,name-canonical=true,push=true
      - name: Export digest
        if: matrix.OS == 'ubuntu-latest'
        run: |
          mkdir -p /tmp/digests
          digest="${{ steps.build.outputs.digest }}"
          touch "/tmp/digests/${digest#sha256:}"
      - name: Upload digest
        if: matrix.OS == 'ubuntu-latest'
        uses: actions/upload-artifact@v3
        with:
          name: digests
          path: /tmp/digests/*
          if-no-files-found: error
          retention-days: 1
      - uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.uploaded_filename }}
          path: ${{ matrix.local_path }}
          if-no-files-found: error
          retention-days: 2
      # - name: Upload release artifacts
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   run: gh release upload ${{ needs.release-please.outputs.tag_name }} ${{ matrix.local_path }}
  package-arm:
    # needs: [release-please]
    # if: ${{ needs.release-please.outputs.release_created }}
    runs-on: ${{ matrix.OS }}
    strategy:
      matrix:
        OS: ["ubuntu-latest"]
        include:
          - os: ubuntu-latest
            uploaded_filename: tgtg.jar
            local_path: artifacts/tgtg.jar
        platform:
          - linux/arm/v7
          - linux/arm64/v8
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY_IMAGE }}
          # type=raw,value=${{ needs.release-please.outputs.tag_name }}
          tags: |
            type=schedule
            type=ref,event=branch
            type=ref,event=tag
            type=ref,event=pr
            type=raw,value=latest
      - uses: coursier/cache-action@v6
      - uses: VirtusLab/scala-cli-setup@v1
        with:
          power: true
          jvm: "temurin:17"
      - name: Package app
        run: |
          mkdir -p artifacts
          scala-cli package . -o "${{ matrix.local_path }}" --assembly
      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        id: build
        with:
          file: ./arm.Dockerfile
          build-args: "LOCAL_PATH=${{ matrix.local_path }}"
          context: .
          push: true
          labels: ${{ steps.meta.outputs.labels }}
          platforms: ${{ matrix.platform }}
          outputs: type=image,name=${{ env.REGISTRY_IMAGE }},push-by-digest=true,name-canonical=true,push=true
      - name: Export digest
        run: |
          mkdir -p /tmp/digests
          digest="${{ steps.build.outputs.digest }}"
          touch "/tmp/digests/${digest#sha256:}"
      - name: Upload digest
        uses: actions/upload-artifact@v3
        with:
          name: digests
          path: /tmp/digests/*
          if-no-files-found: error
          retention-days: 1
      - uses: actions/upload-artifact@v3
        if: matrix.platform == 'linux/arm64/v8' || matrix.platform == 'linux/amd64'
        with:
          name: ${{ matrix.uploaded_filename }}
          path: ${{ matrix.local_path }}
          if-no-files-found: error
          retention-days: 2
  # https://docs.docker.com/build/ci/github-actions/multi-platform/
  merge:
    runs-on: ubuntu-latest
    needs:
      - package
      - package-arm
    steps:
      - name: Download digests
        uses: actions/download-artifact@v3
        with:
          name: digests
          path: /tmp/digests
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY_IMAGE }}
          # type=raw,value=${{ needs.release-please.outputs.tag_name }}
          tags: |
            type=schedule
            type=ref,event=branch
            type=ref,event=tag
            type=ref,event=pr
            type=raw,value=latest
      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Create manifest list and push
        working-directory: /tmp/digests
        run: |
          docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
            $(printf '${{ env.REGISTRY_IMAGE }}@sha256:%s ' *)
      - name: Inspect image
        run: |
          docker buildx imagetools inspect ${{ env.REGISTRY_IMAGE }}:${{ steps.meta.outputs.version }}
